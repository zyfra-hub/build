name: Build and Deploy
on:
  release:
    types: [published]

  workflow_dispatch:
    inputs:
      macos:
        description: Build macOS
        required: true
        type: boolean
        default: true
      windows:
        description: Build Windows
        required: true
        type: boolean
        default: true
      linux:
        description: Build Linux
        required: true
        type: boolean
        default: true
      deploy:
        description: Deploy artifacts
        required: true
        type: boolean
        default: true
      config:
        description: Config path
        required: true
        type: string
        default: talks.hub
      version:
        description: Version
        required: true
        type: string
        default: v1.11.80

run-name: Element Desktop
concurrency: ${{ github.workflow }}

jobs:
  prepare:
    uses: ./.github/workflows/build_prepare.yaml
    with:
      config: ${{ inputs.config }}
      version: ${{ inputs.version }}
    secrets:
      CONFIG_URL: ${{ secrets.CONFIG_URL }}

  windows:
    if: github.event_name != 'workflow_dispatch' || inputs.windows
    needs: prepare
    name: Windows ${{ matrix.arch }}
    strategy:
      matrix:
        arch: [x64] # [ia32, x64]
    uses: ./.github/workflows/build_windows.yaml
    secrets: inherit
    with:
      arch: ${{ matrix.arch }}
      version: ${{ inputs.version }}

  macos:
    if: github.event_name != 'workflow_dispatch' || inputs.macos
    needs: prepare
    name: macOS
    uses: ./.github/workflows/build_macos.yaml
    secrets: inherit
    with:
      version: ${{ inputs.version }}

  linux:
    if: github.event_name != 'workflow_dispatch' || inputs.linux
    needs: prepare
    name: Linux ${{ matrix.arch }}
    strategy:
      matrix:
        arch: [amd64] # [amd64, arm64]
        sqlcipher: [static]
    uses: ./.github/workflows/build_linux.yaml
    with:
      arch: ${{ matrix.arch }}
      sqlcipher: ${{ matrix.sqlcipher }}
      version: ${{ inputs.version }}

  deploy:
    needs:
      - prepare
      - macos
      - linux
      - windows
    runs-on: ubuntu-latest
    name: Deploy
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare artifacts for deployment
        run: |
          for arch in x64 ia32 arm64; do
            if [ -d "win-$arch" ]; then
              mkdir -p "packages.$CONFIG_DIR/"{install,update}"/win32/$arch"
              mv win-$arch/squirrel-windows*/*.exe "packages.$CONFIG_DIR/install/win32/$arch/"
              mv win-$arch/squirrel-windows*/*.nupkg "packages.$CONFIG_DIR/update/win32/$arch/"
              mv win-$arch/squirrel-windows*/RELEASES "packages.$CONFIG_DIR/update/win32/$arch/"
              mv win-$arch/*.msi "packages.$CONFIG_DIR/install/win32/$arch/"
            fi
          done
          if [ -d macos ]; then
            mkdir -p "packages.$CONFIG_DIR/"{install,update}"/macos"
            mv macos/*.dmg "packages.$CONFIG_DIR/install/macos/"
            mv macos/*-mac.zip "packages.$CONFIG_DIR/update/macos/"
          fi
          if [ -d linux-amd64-sqlcipher-static ]; then
            mkdir -p "packages.$CONFIG_DIR/install/linux/glibc-x86-64"
            mv linux-amd64-sqlcipher-static/*.tar.gz "packages.$CONFIG_DIR/install/linux/glibc-x86-64"
            mv linux-amd64-sqlcipher-static/*.deb "packages.$CONFIG_DIR/install/linux/glibc-x86-64"
          fi
          if [ -d linux-arm64-sqlcipher-static ]; then
            mkdir -p "packages.$CONFIG_DIR/install/linux/glibc-aarch64"
            mv linux-arm64-sqlcipher-static/*.tar.gz "packages.$CONFIG_DIR/install/linux/glibc-aarch64"
            mv linux-arm64-sqlcipher-static/*.deb "packages.$CONFIG_DIR/install/linux/glibc-aarch64"
          fi
        env:
          CONFIG_DIR: ${{ inputs.config }}

      - name: "Push artifacts"
        run: |
          for arch in x64 ia32 arm64; do
            if [ -d "win-$arch" ]; then
              pushd "packages.$CONFIG_DIR/install/win32/$arch"
              curl \
                -u "$UPPLOADS_USER:$UPPLOADS_PASS" \
                -T "$(find . -type f -iname "*.exe" | xargs -0 -n1 -- basename)" \
                "$UPPLOADS_URL/${{ inputs.version }}/${CONFIG_DIR}_${{ inputs.version }}_$arch.exe"
              curl \
                -u "$UPPLOADS_USER:$UPPLOADS_PASS" \
                -T "$(find . -type f -iname "*.msi" | xargs -0 -n1 -- basename)" \
                "$UPPLOADS_URL/${{ inputs.version }}/${CONFIG_DIR}_${{ inputs.version }}_$arch.msi"
              popd
            fi
          done
          if [ -d macos ]; then
            pushd "packages.$CONFIG_DIR/install/macos"
            curl \
              -u "$UPPLOADS_USER:$UPPLOADS_PASS" \
              -T "$(find . -type f -iname "*.dmg" | xargs -0 -n1 -- basename)" \
              "$UPPLOADS_URL/${{ inputs.version }}/${CONFIG_DIR}_${{ inputs.version }}.dmg"
            popd
          fi
          if [ -d linux-amd64-sqlcipher-static ]; then
            pushd "packages.$CONFIG_DIR/install/linux/glibc-x86-64"
            curl \
              -u "$UPPLOADS_USER:$UPPLOADS_PASS" \
              -T "$(find . -type f -iname "*.tar.gz" | xargs -0 -n1 -- basename)" \
              "$UPPLOADS_URL/${{ inputs.version }}/${CONFIG_DIR}_${{ inputs.version }}_amd64.tar.gz"
            curl \
              -u "$UPPLOADS_USER:$UPPLOADS_PASS" \
              -T "$(find . -type f -iname "*.deb" | xargs -0 -n1 -- basename)" \
              "$UPPLOADS_URL/${{ inputs.version }}/${CONFIG_DIR}_${{ inputs.version }}_amd64.deb"
            popd
          fi
          if [ -d linux-arm64-sqlcipher-static ]; then
            pushd "packages.$CONFIG_DIR/install/linux/glibc-aarch64"
            curl \
              -u "$UPPLOADS_USER:$UPPLOADS_PASS" \
              -T "$(find . -type f -iname "*.tar.gz" | xargs -0 -n1 -- basename)" \
              "$UPPLOADS_URL/${{ inputs.version }}/${CONFIG_DIR}_${{ inputs.version }}_arm64.tar.gz"
            curl \
              -u "$UPPLOADS_USER:$UPPLOADS_PASS" \
              -T "$(find . -type f -iname "*.deb" | xargs -0 -n1 -- basename)" \
              "$UPPLOADS_URL/${{ inputs.version }}/${CONFIG_DIR}_${{ inputs.version }}_arm64.deb"
            popd
          fi
          curl -u "$UPPLOADS_USER:$UPPLOADS_PASS" -T talks-web/web.tar.gz \
            "$UPPLOADS_URL/${{ inputs.version }}/${CONFIG_DIR}_web_${{ inputs.version }}.tar.gz"
        env:
          CONFIG_DIR: ${{ inputs.config }}
          UPPLOADS_URL: ${{ secrets.UPPLOADS_URL }}
          UPPLOADS_USER: ${{ secrets.UPPLOADS_USER }}
          UPPLOADS_PASS: ${{ secrets.UPPLOADS_PASS }}
